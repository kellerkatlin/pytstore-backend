generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  name                  String
  username              String?               @unique
  email                 String                @unique
  password              String
  roleId                Int
  referralCode          String                @unique
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @default(now())
  createdBy             Int?
  updatedBy             Int?
  recoveryExpires       DateTime?
  recoveryToken         String?
  lastName              String?
  auditLogs             AuditLog[]
  commissions           Commission[]
  entityChanges         EntityChangeLog[]     @relation("EntityChangedBy")
  createdExpenses       Expense[]             @relation("UserCreatedExpenses")
  loginAttempts         LoginAttempt[]
  notifications         Notification[]
  productPriceHistories ProductPriceHistory[] @relation("ProductPriceHistoryChangedBy")
  referralsRecv         Referral[]            @relation("Referred")
  referralsSent         Referral[]            @relation("Referrer")
  sales                 Sale[]
  seller                Seller?
  createdByUser         User?                 @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers          User[]                @relation("UserCreatedBy")
  role                  Role                  @relation(fields: [roleId], references: [id])
  updatedByUser         User?                 @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  updatedUsers          User[]                @relation("UserUpdatedBy")
  providers             UserProvider[]
  withdrawals           WithdrawalRequest[]
}

model Role {
  id          Int      @id @default(autoincrement())
  description String
  name        RoleName @unique
  users       User[]
}

model Seller {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  ruc          String?  @unique
  businessName String?
  storeName    String?
  description  String?
  logoUrl      String?
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model SellerRequest {
  id             Int                 @id @default(autoincrement())
  email          String?             @unique
  phone          String?             @unique
  name           String
  message        String?
  status         SellerRequestStatus @default(PENDING)
  createdAt      DateTime            @default(now())
  approvedAt     DateTime?
  completedAt    DateTime?
  rejectedAt     DateTime?
  creationToken  String?             @unique
  tokenExpiresAt DateTime?
}

model Customer {
  id                  Int                   @id @default(autoincrement())
  name                String
  email               String?               @unique
  phone               String                @unique
  createdAt           DateTime              @default(now())
  password            String?
  isTemporaryPassword Boolean               @default(false)
  addresses           Address[]
  cartSession         CartSession[]
  logs                CustomerActivityLog[]
  reviews             ProductReview[]
  sales               Sale[]
  wishlists           Wishlist[]
}

model CustomerActivityLog {
  id         Int      @id @default(autoincrement())
  customerId Int
  action     String
  metadata   String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Address {
  id          Int      @id @default(autoincrement())
  addressLine String
  district    String
  city        String
  phone       String
  customerId  Int
  customer    Customer @relation(fields: [customerId], references: [id])
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  isDeleted  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  attributes Attribute[]
  products   Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]
}

model ProductPriceHistory {
  id        Int      @id @default(autoincrement())
  productId Int
  price     Float
  changedAt DateTime @default(now())
  reason    String?
  changedBy Int?
  user      User?    @relation("ProductPriceHistoryChangedBy", fields: [changedBy], references: [id])
}

model Product {
  id              Int                 @id @default(autoincrement())
  title           String
  description     String
  price           Float
  stock           Int
  categoryId      Int
  brandId         Int
  isActive        Boolean             @default(true)
  isPreorder      Boolean             @default(false)
  commissionValue Float
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
  commissionType  CommissionType
  status          ProductStatus       @default(ACTIVE)
  cartItems       CartItem[]
  inventoryMoves  InventoryMovement[]
  brand           Brand               @relation(fields: [brandId], references: [id])
  category        Category            @relation(fields: [categoryId], references: [id])
  attributes      ProductAttribute[]
  costDetails     ProductCostDetail[]
  images          ProductImage[]
  items           ProductItem[]
  reviews         ProductReview[]
  tags            ProductTag[]
  variants        ProductVariant[]
  PurchaseItem    PurchaseItem[]
  sales           Sale[]
  wishlists       Wishlist[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  imageUrl  String
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
}

model ProductItem {
  id                Int                 @id @default(autoincrement())
  productId         Int
  serialCode        String              @unique
  condition         String
  functionality     String
  available         Boolean             @default(true)
  cost              Float
  salePrice         Float
  sold              Boolean             @default(false)
  createdAt         DateTime            @default(now())
  purchaseItemId    Int?
  commissionType    CommissionType?
  commissionValue   Float?
  ProductCostDetail ProductCostDetail[]
  product           Product             @relation(fields: [productId], references: [id])
  purchaseItem      PurchaseItem?       @relation(fields: [purchaseItemId], references: [id])
  images            ProductItemImage[]
  Sale              Sale[]
}

model ProductItemImage {
  id          Int         @id @default(autoincrement())
  itemId      Int
  imageUrl    String
  isPrimary   Boolean     @default(false)
  productItem ProductItem @relation(fields: [itemId], references: [id])

  @@unique([itemId, imageUrl])
}

model Attribute {
  id               Int                @id @default(autoincrement())
  name             String
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id])
  values           AttributeValue[]
  ProductAttribute ProductAttribute[]
  VariantAttribute VariantAttribute[]

  @@unique([name, categoryId])
}

model AttributeValue {
  id               Int                @id @default(autoincrement())
  attributeId      Int
  value            String
  attribute        Attribute          @relation(fields: [attributeId], references: [id])
  ProductAttribute ProductAttribute[]
  VariantAttribute VariantAttribute[]
}

model ProductAttribute {
  id          Int            @id @default(autoincrement())
  productId   Int
  attributeId Int
  valueId     Int
  attribute   Attribute      @relation(fields: [attributeId], references: [id])
  product     Product        @relation(fields: [productId], references: [id])
  value       AttributeValue @relation(fields: [valueId], references: [id])
}

model InventoryMovement {
  id         Int                         @id @default(autoincrement())
  productId  Int
  sourceId   Int
  quantity   Int
  reason     String
  createdAt  DateTime                    @default(now())
  sourceType InventoryMovementSourceType
  direction  InventoryMovementDirection
  variantId  Int?
  product    Product                     @relation(fields: [productId], references: [id])
  variant    ProductVariant?             @relation(fields: [variantId], references: [id])
}

model ProductCostDetail {
  id             Int            @id @default(autoincrement())
  productItemId  Int?
  purchaseItemId Int?
  description    String
  amount         Float
  createdAt      DateTime       @default(now())
  productId      Int?
  type           CostDetailType
  Product        Product?       @relation(fields: [productId], references: [id])
  productItem    ProductItem?   @relation(fields: [productItemId], references: [id])
  purchaseItem   PurchaseItem?  @relation(fields: [purchaseItemId], references: [id])
}

model Purchase {
  id           Int            @id @default(autoincrement())
  providerName String
  invoiceCode  String
  purchaseDate DateTime
  createdAt    DateTime       @default(now())
  items        PurchaseItem[]
}

model PurchaseItem {
  id           Int                 @id @default(autoincrement())
  purchaseId   Int
  productId    Int
  unitCost     Float
  quantity     Int
  createdAt    DateTime            @default(now())
  status       PurchaseItemStatus
  costDetails  ProductCostDetail[]
  productItems ProductItem[]
  product      Product             @relation(fields: [productId], references: [id])
  purchase     Purchase            @relation(fields: [purchaseId], references: [id])
  sales        Sale[]
}

model Sale {
  id                      Int             @id @default(autoincrement())
  userId                  Int
  productId               Int
  productItemId           Int?
  purchaseItemId          Int?
  quantity                Int
  notes                   String?
  salePrice               Float
  totalAmount             Float
  costTotal               Float
  profitTotal             Float
  commissionBasedOnProfit Boolean         @default(false)
  createdAt               DateTime        @default(now())
  customerId              Int
  isEmailVerified         Boolean         @default(false)
  isPhoneVerified         Boolean         @default(false)
  status                  SalesStatus     @default(PENDING)
  type                    SaleType
  variantId               Int?
  commission              Commission?
  Coupon                  Coupon[]
  payments                Payment[]
  return                  Return?
  customer                Customer        @relation(fields: [customerId], references: [id])
  product                 Product         @relation(fields: [productId], references: [id])
  productItem             ProductItem?    @relation(fields: [productItemId], references: [id])
  purchaseItem            PurchaseItem?   @relation(fields: [purchaseItemId], references: [id])
  user                    User            @relation(fields: [userId], references: [id])
  variant                 ProductVariant? @relation(fields: [variantId], references: [id])
  shipment                Shipment?
}

model CapitalTransaction {
  id            Int               @id @default(autoincrement())
  type          CapitalType
  amount        Float
  description   String
  referenceId   Int?
  createdAt     DateTime          @default(now())
  accountId     Int
  expenseId     Int?              @unique
  referenceType CapitalSourceType
  account       CapitalAccount    @relation(fields: [accountId], references: [id])
  expense       Expense?          @relation("CapitalExpense")
}

model Expense {
  id                   Int                 @id @default(autoincrement())
  type                 ExpenseType
  amount               Float
  description          String
  createdAt            DateTime            @default(now())
  createdById          Int?
  capitalTransactionId Int?                @unique
  capitalTransaction   CapitalTransaction? @relation("CapitalExpense", fields: [capitalTransactionId], references: [id])
  createdBy            User?               @relation("UserCreatedExpenses", fields: [createdById], references: [id])
}

model CapitalAccount {
  id           Int                  @id @default(autoincrement())
  name         CapitalAccountName   @unique
  description  String?
  transactions CapitalTransaction[]
}

model Shipment {
  id               Int            @id @default(autoincrement())
  saleId           Int            @unique
  trackingCode     String
  carrier          String
  shippingCost     Float
  deliveredAt      DateTime?
  createdAt        DateTime       @default(now())
  shippingMethodId Int
  shippingType     ShippingType
  paidBy           ShippingPayer
  status           ShipmentStatus
  sale             Sale           @relation(fields: [saleId], references: [id])
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
}

model ShippingMethod {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  shipments   Shipment[]
}

model PaymentMethod {
  id                   Int       @id @default(autoincrement())
  name                 String
  isActive             Boolean   @default(true)
  supportsInstallments Boolean   @default(false)
  createdAt            DateTime  @default(now())
  payments             Payment[]
}

model Payment {
  id              Int               @id @default(autoincrement())
  saleId          Int
  paymentMethodId Int
  totalPaid       Float
  paidAt          DateTime?
  createdAt       DateTime          @default(now())
  status          PaymentStatus     @default(PENDING)
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  sale            Sale              @relation(fields: [saleId], references: [id])
  installments    SaleInstallment[]
}

model InstallmentPlan {
  id                Int               @id @default(autoincrement())
  name              String
  interestRate      Float
  totalInstallments Int
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  installments      SaleInstallment[]
}

model SaleInstallment {
  id                Int             @id @default(autoincrement())
  paymentId         Int
  installmentPlanId Int
  installmentNumber Int
  dueDate           DateTime
  amount            Float
  paid              Boolean         @default(false)
  paidAt            DateTime?
  plan              InstallmentPlan @relation(fields: [installmentPlanId], references: [id])
  payment           Payment         @relation(fields: [paymentId], references: [id])
}

model Commission {
  id        Int              @id @default(autoincrement())
  saleId    Int              @unique
  userId    Int
  amount    Float
  createdAt DateTime         @default(now())
  status    CommissionStatus @default(PENDING)
  sale      Sale             @relation(fields: [saleId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

model WithdrawalRequest {
  id        Int              @id @default(autoincrement())
  userId    Int
  amount    Float
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  status    WithdrawalStatus
  user      User             @relation(fields: [userId], references: [id])
}

model Coupon {
  id           Int        @id @default(autoincrement())
  code         String     @unique
  amount       Float
  usedBySaleId Int?
  isActive     Boolean    @default(true)
  expiresAt    DateTime?
  discountType CouponType
  usedInSale   Sale?      @relation(fields: [usedBySaleId], references: [id])
}

model Promotion {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  amount       Float
  referenceId  Int
  isActive     Boolean       @default(true)
  startsAt     DateTime
  endsAt       DateTime
  discountType CouponType
  appliesTo    PromotionType
}

model Return {
  id         Int              @id @default(autoincrement())
  saleId     Int              @unique
  reason     String
  cost       Float
  createdAt  DateTime         @default(now())
  resolution ReturnResolution
  sale       Sale             @relation(fields: [saleId], references: [id])
}

model Setting {
  id          Int    @id @default(autoincrement())
  key         String @unique
  value       String
  description String
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    Int
  entityId  Int
  metadata  String
  createdAt DateTime    @default(now())
  ip        String?
  userAgent String?
  action    AuditAction
  entity    EntityType
  user      User        @relation(fields: [userId], references: [id])
}

model EntityChangeLog {
  id            Int         @id @default(autoincrement())
  entityId      Int
  changedBy     Int
  changeSummary String
  diff          Json
  createdAt     DateTime    @default(now())
  entityType    EntityType
  changeType    AuditAction
  user          User        @relation("EntityChangedBy", fields: [changedBy], references: [id])
}

model Referral {
  id             Int      @id @default(autoincrement())
  referrerId     Int
  referredUserId Int
  createdAt      DateTime @default(now())
  referred       User     @relation("Referred", fields: [referredUserId], references: [id])
  referrer       User     @relation("Referrer", fields: [referrerId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  body      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  productId  Int
  createdAt  DateTime @default(now())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  productId  Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model CartSession {
  id           Int        @id @default(autoincrement())
  sessionToken String     @unique
  createdAt    DateTime   @default(now())
  customerId   Int?
  items        CartItem[]
  customer     Customer?  @relation(fields: [customerId], references: [id])
}

model CartItem {
  id            Int         @id @default(autoincrement())
  cartSessionId Int
  productId     Int
  quantity      Int
  addedAt       DateTime    @default(now())
  cartSession   CartSession @relation(fields: [cartSessionId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  productId Int
  tag       String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id             Int                 @id @default(autoincrement())
  productId      Int
  sku            String              @unique
  price          Float
  stock          Int
  imageUrl       String
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  inventoryMoves InventoryMovement[]
  product        Product             @relation(fields: [productId], references: [id])
  sales          Sale[]
  attributes     VariantAttribute[]
}

model VariantAttribute {
  id          Int            @id @default(autoincrement())
  variantId   Int
  attributeId Int
  valueId     Int
  attribute   Attribute      @relation(fields: [attributeId], references: [id])
  value       AttributeValue @relation(fields: [valueId], references: [id])
  variant     ProductVariant @relation(fields: [variantId], references: [id])
}

model LoginAttempt {
  id         Int                @id @default(autoincrement())
  userId     Int?
  loginInput String
  ipAddress  String
  createdAt  DateTime           @default(now())
  status     LoginAttemptStatus
  user       User?              @relation(fields: [userId], references: [id])
}

model UserProvider {
  id             Int              @id @default(autoincrement())
  userId         Int
  providerUserId String
  email          String
  createdAt      DateTime         @default(now())
  provider       UserProviderType
  user           User             @relation(fields: [userId], references: [id])
}

enum RoleName {
  SUPERADMIN
  ADMIN
  SELLER
  RECRUITER
  STOCK
  MARKETING
}

enum SellerRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DISABLED
  DELETED
  PAUSED
}

enum CommissionType {
  FIXED
  PERCENT
}

enum InventoryMovementDirection {
  IN
  OUT
}

enum InventoryMovementSourceType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
}

enum CostDetailType {
  SHIPPING
  TAX
  ADDITIONAL
  OTHER
}

enum PurchaseItemStatus {
  PENDING
  RECEIVED
  REJECTED
}

enum SalesStatus {
  PENDING
  PAID
  CANCELED
  REFUNDED
  COMPLETED
}

enum SaleType {
  REGULAR
  PREORDER
}

enum CapitalAccountName {
  CASH
  INVENTORY
  PROFITS
  COMMISSIONS
}

enum CapitalSourceType {
  SALE
  PURCHASE
  RETURN
  SHIPMENT
  EXPENSE
  WITHDRAWAL
  OTHER
}

enum CapitalType {
  INJECTION
  PURCHASE_EXPENSE
  OPERATIONAL_EXPENSE
  SALE_PROFIT
  DEVOLUTION_COST
  WITHDRAWAL
  TRANSFER_IN
  TRANSFER_OUT
}

enum ExpenseType {
  SALARY
  MARKETING
  PLATFORM
  RENT
  LOGISTICS
  OTHER
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELED
}

enum ShippingType {
  STANDARD
  EXPRESS
  LOCAL
}

enum ShippingPayer {
  CUSTOMER
  COMPANY
  SELLER
}

enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
}

enum CommissionStatus {
  PENDING
  PAID
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum CouponType {
  PERCENT
  AMOUNT
}

enum PromotionType {
  CATEGORY
  PRODUCT
  BRAND
  SELLER
}

enum ReturnResolution {
  REFUND
  REPLACEMENT
  CREDIT
  NONE
}

enum EntityType {
  SALE
  PRODUCT
  USER
  SELLER
  COUPON
}

enum AuditAction {
  LOGIN
  LOGOUT
  CREATE
  UPDATE
  DELETE
  REGISTER
  SALE_COMPLETED
}

enum LoginAttemptStatus {
  SUCCESS
  FAIL
}

enum UserProviderType {
  GOOGLE
  FACEBOOK
  GITHUB
  TWITTER
  APPLE
}
